{"ast":null,"code":"import { fromEvent, debounceTime, map, distinctUntilChanged, startWith, tap } from 'rxjs';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let ScreenService = /*#__PURE__*/(() => {\n  class ScreenService {\n    constructor() {\n      this.MOBILE_MAX_WIDTH = 425;\n      this.TABLET_MAX_WIDTH = 1024;\n      this.screenState = {};\n      this.ScreenState$ = new BehaviorSubject({\n        mobile: false,\n        tablet: false,\n        desktop: true\n      });\n      this._resize$ = fromEvent(window, 'resize').pipe(debounceTime(200), map(() => window.innerWidth), //Don't use mapTo! \n      distinctUntilChanged(), startWith(window.innerWidth), tap(width => this.setWindowWidth(width)));\n      this.resizeSubscription = this._resize$.subscribe();\n    }\n\n    setWindowWidth(width) {\n      const mobile = width <= this.MOBILE_MAX_WIDTH;\n      const tablet = width <= this.TABLET_MAX_WIDTH && width > this.MOBILE_MAX_WIDTH;\n      this.screenState = {\n        mobile,\n        tablet,\n        desktop: !mobile && !tablet\n      };\n      this.ScreenState$.next(this.screenState);\n    }\n\n    getScreenObserver() {\n      return this.ScreenState$;\n    }\n\n    ngOnDestroy() {\n      this.resizeSubscription.unsubscribe();\n    }\n\n  }\n\n  ScreenService.ɵfac = function ScreenService_Factory(t) {\n    return new (t || ScreenService)();\n  };\n\n  ScreenService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ScreenService,\n    factory: ScreenService.ɵfac,\n    providedIn: 'root'\n  });\n  return ScreenService;\n})();","map":null,"metadata":{},"sourceType":"module"}